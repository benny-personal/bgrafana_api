# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from bgrafana_api.models.field2 import Field2  # noqa: E501

class TestField2(unittest.TestCase):
    """Field2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Field2:
        """Test Field2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Field2`
        """
        model = Field2()  # noqa: E501
        if include_optional:
            return Field2(
                config = bgrafana_api.models.field_config_represents_the_display_properties_for_a_field/.FieldConfig represents the display properties for a Field.(
                    color = bgrafana_api.models.color.color(), 
                    custom = bgrafana_api.models.custom.custom(), 
                    decimals = 56, 
                    description = '', 
                    display_name = '', 
                    display_name_from_ds = '', 
                    filterable = True, 
                    interval = 1.337, 
                    links = [
                        bgrafana_api.models.data_link.DataLink(
                            target_blank = True, 
                            title = '', 
                            url = '', )
                        ], 
                    mappings = [
                        bgrafana_api.models.value_mapping.ValueMapping()
                        ], 
                    max = 1.337, 
                    min = 1.337, 
                    no_value = '', 
                    path = '', 
                    thresholds = bgrafana_api.models.thresholds_config.ThresholdsConfig(
                        mode = '', 
                        steps = [
                            bgrafana_api.models.threshold.Threshold(
                                color = '', 
                                state = '', 
                                value = 1.337, )
                            ], ), 
                    type = bgrafana_api.models.field_type_config.FieldTypeConfig(
                        enum = bgrafana_api.models.enum_field_config.EnumFieldConfig(
                            color = [
                                ''
                                ], 
                            description = [
                                ''
                                ], 
                            icon = [
                                ''
                                ], 
                            text = [
                                ''
                                ], ), ), 
                    unit = '', 
                    writeable = True, ),
                labels = {
                    'key' : ''
                    },
                name = ''
            )
        else:
            return Field2(
        )
        """

    def testField2(self):
        """Test Field2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
